name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write

env:
  TZ: /usr/share/zoneinfo/America/Los_Angeles
  NODE_VERSION: v20.19.0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  # ----- DEPENDENCIES INSTALLATION -----
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ci-node_modules-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

  # ----- LINTING -----
  lint:
    name: Lint Code
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ci-node_modules-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run Prettier check
        run: yarn prettier-check

  # ----- TYPE CHECKING -----
  type-check:
    name: Type Check
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ci-node_modules-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Run Flow type checking
        run: yarn flow-ci

  # ----- TESTING -----
  test:
    name: Run Tests
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-suite: [stable, www, classic]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ci-node_modules-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          if [ "${{ matrix.test-suite }}" = "stable" ]; then
            yarn test-stable
          elif [ "${{ matrix.test-suite }}" = "www" ]; then
            yarn test-www
          elif [ "${{ matrix.test-suite }}" = "classic" ]; then
            yarn test-classic
          fi

  # ----- BUILD -----
  build:
    name: Build Project
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ci-node_modules-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  # ----- SECURITY CHECKS -----
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run npm audit
        run: yarn audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ----- DOCKER VALIDATION -----
  docker-check:
    name: Docker Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "docker-files=true" >> $GITHUB_OUTPUT
            echo "Found Docker files"
          else
            echo "docker-files=false" >> $GITHUB_OUTPUT
            echo "No Docker files found"
          fi

      - name: Validate Dockerfile syntax
        if: steps.dockerfile-check.outputs.docker-files == 'true'
        run: |
          if [ -f "Dockerfile" ]; then
            docker run --rm -i hadolint/hadolint < Dockerfile
          fi

      - name: Build Docker image (if Dockerfile exists)
        if: steps.dockerfile-check.outputs.docker-files == 'true'
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t react-test .
          fi

      - name: Run Docker container tests (if applicable)
        if: steps.dockerfile-check.outputs.docker-files == 'true'
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Docker image built successfully"
            # Add any container-specific tests here if needed
          fi

  # ----- FINAL STATUS -----
  status:
    name: CI Status
    needs: [lint, type-check, test, build, security, docker-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "All CI checks completed!"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker: ${{ needs.docker-check.result }}" 